// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// classify_cpp
std::vector<std::string> classify_cpp(const arma::mat& y, const std::vector<std::string>& C, const double& t, const double& b);
RcppExport SEXP _RWNN_classify_cpp(SEXP ySEXP, SEXP CSEXP, SEXP tSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(classify_cpp(y, C, t, b));
    return rcpp_result_gen;
END_RCPP
}
// estimate_output_weights
Rcpp::List estimate_output_weights(const arma::mat& O, const arma::mat& y, const std::string& lnorm, const double& lambda);
RcppExport SEXP _RWNN_estimate_output_weights(SEXP OSEXP, SEXP ySEXP, SEXP lnormSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type O(OSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type lnorm(lnormSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_output_weights(O, y, lnorm, lambda));
    return rcpp_result_gen;
END_RCPP
}
// fista
Rcpp::List fista(const arma::mat& X, const arma::mat& H, const arma::mat& W, const double& tau, const int& max_iterations, const int& w, const double& step_shrink, const int& backtrack, const double& tolerance, const int& trace);
RcppExport SEXP _RWNN_fista(SEXP XSEXP, SEXP HSEXP, SEXP WSEXP, SEXP tauSEXP, SEXP max_iterationsSEXP, SEXP wSEXP, SEXP step_shrinkSEXP, SEXP backtrackSEXP, SEXP toleranceSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< const int& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_shrink(step_shrinkSEXP);
    Rcpp::traits::input_parameter< const int& >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const int& >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(fista(X, H, W, tau, max_iterations, w, step_shrink, backtrack, tolerance, trace));
    return rcpp_result_gen;
END_RCPP
}
// rwnn_forward
std::vector<arma::mat> rwnn_forward(arma::mat X, const std::vector<arma::mat>& W, const std::vector<std::string>& activation, const std::vector<bool>& bias);
RcppExport SEXP _RWNN_rwnn_forward(SEXP XSEXP, SEXP WSEXP, SEXP activationSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type activation(activationSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(rwnn_forward(X, W, activation, bias));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RWNN_classify_cpp", (DL_FUNC) &_RWNN_classify_cpp, 4},
    {"_RWNN_estimate_output_weights", (DL_FUNC) &_RWNN_estimate_output_weights, 4},
    {"_RWNN_fista", (DL_FUNC) &_RWNN_fista, 10},
    {"_RWNN_rwnn_forward", (DL_FUNC) &_RWNN_rwnn_forward, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RWNN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
